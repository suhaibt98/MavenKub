---
stages:  # Define stages for the pipeline
  - build
  - dockerize
  - deploy
  - cleanup

build:  # Build stage
  stage: build
  tags:
    - suhaib
  before_script:
    # Retrieve commit date and format it
    - export COMMIT_DATE=$(git show -s --format=%cd --date=format:"%y%m%d" $CI_COMMIT_SHA)
    # Get the short commit SHA
    - export COMMIT_SHA=$(echo $CI_COMMIT_SHORT_SHA)
    # Create a new version based on commit date and SHA
    - export NEW_VERSION="$COMMIT_DATE-$COMMIT_SHA"
    # Print the new version
    - echo "NEW_VERSION= $NEW_VERSION"
  script:
    # Set the new version in Maven
    - mvn versions:set -DnewVersion=$NEW_VERSION
    # Clean and package the Maven project
    - mvn clean package
  artifacts:
    paths:
      - target/
    name: ci/cd practice
  allow_failure: false

dockerize:  # Dockerize stage
  stage: dockerize
  tags:
    - suhaib
  script:
    # Get the date of the last commit
    - LAST_COMMIT_DATE=$(git log -1 --format=%cd --date=format:'%y%m%d')
    # Get the short commit SHA
    - COMMIT_HASH=$(git rev-parse --short=8 HEAD)
    # Create an image tag based on date and SHA
    - IMAGE_TAG="$LAST_COMMIT_DATE-$COMMIT_HASH"
    # Get the image ID
    - IMAGE_ID=$(docker images -q | head -n 1)
    # Clean and package the Maven project
    - mvn clean package
    # Print the image tag
    - echo "IMAGE_TAG = $IMAGE_TAG"
    # Print a message
    - echo "Building Docker image with tag $IMAGE_TAG"
    # Build the Docker image with the specified tag
    - docker build --build-arg IMAGE_TAG=$IMAGE_TAG -t mavenproject:$IMAGE_TAG .
    # Check if the image was successfully built
    - if [[ "$(docker images -q mavenproject:$IMAGE_TAG 2> /dev/null)" == "" ]]; then echo "ERROR Failed to build Docker image with tag $IMAGE_TAG"; exit 1; fi
    # Login to Docker registry
    - docker login -u suhaibtelfah -p Suhaib079??!
    # Tag the Docker image
    - docker tag $IMAGE_ID suhaibtelfah/mavenproject:$IMAGE_TAG
    # Push the Docker image to the registry
    - docker push suhaibtelfah/mavenproject:$IMAGE_TAG

deploy-to-minikube:  # Define a job named "deploy-to-minikube" with the stage "deploy"
  stage: deploy
  tags:
    - suhaib
  script:
    # Start Minikube
    - minikube delete
    - minikube start --addons=ingress
    # Create a new namespace for the branch
    - kubectl create namespace $CI_COMMIT_REF_NAME
    # Apply the Kubernetes manifests for the app and database
    - ls
    - cd /home/gitlab-runner/builds/Tsbd7bdz/0/ps.suhaib.telfah/devops-practices/practicehelm
    - ls
    - sleep 60
    - helm install practicehelm-1 /home/gitlab-runner/builds/Tsbd7bdz/0/ps.suhaib.telfah/devops-practices/practicehelm -n $CI_COMMIT_REF_NAME
  # Only run this job for branches
  only:
    - branches
  # Do not run this job for the master branch
  except:
    - master

cleanup_branch:  # Cleanup stage
  stage: cleanup
  tags:
    - suhaib
  script:
    # Delete the Kubernetes namespace based on the branch name
    - helm uninstall practicehelm-1 /home/suhaib/Downloads/devops_sample/practicehelm -n $CI_COMMIT_REF_NAME
  # Only run this job for branches
  only:
    - branches
  # Do not run this job for the master branch
  except:
    - master
  when: manual
